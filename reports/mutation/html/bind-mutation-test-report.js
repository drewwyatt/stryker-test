document.querySelector('mutation-test-report-app').report = {"files":{"/Users/drewwyatt/Projects/stryker-test/src/formatters.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":66,"line":6},"start":{"column":51,"line":5}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1","location":{"end":{"column":66,"line":6},"start":{"column":3,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2","location":{"end":{"column":43,"line":6},"start":{"column":39,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3","location":{"end":{"column":54,"line":6},"start":{"column":46,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { Person, isAdult } from './person'\n\nexport type Formatter<T> = (t: T) => string\n\nexport const toIsAdultString: Formatter<Person> = person =>\n  `${person.name} ${isAdult(person) ? 'is' : 'is not'} an adult.`\n"},"/Users/drewwyatt/Projects/stryker-test/src/index.ts":{"language":"typescript","mutants":[{"id":"4","location":{"end":{"column":2,"line":13},"start":{"column":26,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"5","location":{"end":{"column":19,"line":8},"start":{"column":12,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"6","location":{"end":{"column":19,"line":9},"start":{"column":12,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"8","location":{"end":{"column":19,"line":11},"start":{"column":12,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":17,"line":12},"start":{"column":12,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":18,"line":10},"start":{"column":12,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { toIsAdultString } from './formatters'\nimport { Person, toPerson } from './person'\nimport { printer } from './printer'\n\nconst printIsAdult = printer(toIsAdultString)\n\nconst people: Person[] = [\n  toPerson('Steve', 30),\n  toPerson('Nancy', 12),\n  toPerson('Carl', 18),\n  toPerson('Carla', 45),\n  toPerson('Ben', 10),\n]\n\npeople.forEach(printIsAdult)\n"},"/Users/drewwyatt/Projects/stryker-test/src/person.ts":{"language":"typescript","mutants":[{"id":"10","location":{"end":{"column":60,"line":6},"start":{"column":24,"line":6}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"11","location":{"end":{"column":60,"line":6},"start":{"column":44,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"12","location":{"end":{"column":60,"line":6},"start":{"column":44,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":57,"line":6},"start":{"column":55,"line":6}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"14","location":{"end":{"column":57,"line":6},"start":{"column":55,"line":6}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"15","location":{"end":{"column":71,"line":8},"start":{"column":25,"line":8}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"16","location":{"end":{"column":70,"line":8},"start":{"column":57,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"export type Person = {\n  name: string\n  age: number\n}\n\nexport const isAdult = (person: Person) => person.age >= 18\n\nexport const toPerson = (name: string, age: number) => ({ name, age })\n"},"/Users/drewwyatt/Projects/stryker-test/src/printer.ts":{"language":"typescript","mutants":[{"id":"17","location":{"end":{"column":32,"line":4},"start":{"column":24,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"18","location":{"end":{"column":32,"line":4},"start":{"column":56,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { Formatter } from './formatters'\n\nexport const printer = <T>(formatter: Formatter<T>) => (value: T) =>\n  console.log(formatter(value))\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};